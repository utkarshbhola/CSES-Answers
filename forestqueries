#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    vector<vector<int>> prefix;

    void NumMatrix(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size();
        prefix = vector<vector<int>>(m + 1, vector<int>(n + 1, 0));

        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                prefix[i][j] = matrix[i - 1][j - 1]
                             + prefix[i - 1][j]
                             + prefix[i][j - 1]
                             - prefix[i - 1][j - 1];
            }
        }
    }

    int find_trees(int y1, int y2, int x1, int x2) {
        return prefix[y2][x2] - prefix[y1 - 1][x2] - prefix[y2][x1 - 1] + prefix[y1 - 1][x1 - 1];
    }
};

int main() {
    int n, q;
    cin >> n >> q;

    vector<vector<int>> forest(n, vector<int>(n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> forest[i][j];
        }
    }

    Solution obj;
    obj.NumMatrix(forest);

    for (int i = 0; i < q; i++) {
        int y1, y2, x1, x2;
        cin >> y1 >> y2 >> x1 >> x2;
        cout << obj.find_trees(y1, y2, x1, x2) << endl;
    }

    return 0;
}
