#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int N = 1e5+5;
int parent[N];

// Find with path compression
int find(int x) {
    if (parent[x] == x) return x;
    return parent[x] = find(parent[x]);
}

// Union by rank/size is optional here
void union_sets(int a, int b) {
    a = find(a);
    b = find(b);
    if (a != b) {
        parent[b] = a;
    }
}

int main() {
    int n, m;
    cin >> n >> m;

    // Initialize DSU parent
    for (int i = 1; i <= n; ++i)
        parent[i] = i;

    // Read and connect existing roads
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        union_sets(u, v);
    }

    // Find unique components
    vector<int> representatives;
    for (int i = 1; i <= n; ++i) {
        if (find(i) == i) {
            representatives.push_back(i);
        }
    }

    // Output the roads to add
    cout << representatives.size() - 1 << '\n';
    for (int i = 1; i < representatives.size(); ++i) {
        cout << representatives[0] << " " << representatives[i] << '\n';
    }

    return 0;
}
